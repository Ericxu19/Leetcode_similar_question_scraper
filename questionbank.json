{
    "Maximum Subarray": [
        "Given an integer array nums, find the contiguous subarray\u00a0(containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        [
            "Best Time to Buy and Sell Stock",
            "Maximum Product Subarray",
            "Degree of an Array",
            "Longest Turbulent Subarray"
        ],
        [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ]
    ]
}{
    "Maximum Subarray": [
        "Given an integer array nums, find the contiguous subarray\u00a0(containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        [
            "Best Time to Buy and Sell Stock",
            "Maximum Product Subarray",
            "Degree of an Array",
            "Longest Turbulent Subarray"
        ],
        [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ]
    ],
    "Length of Last Word": [
        "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\nNote: A word is defined as a maximal substring consisting\u00a0of non-space characters only.\nExample:\nInput: \"Hello World\"\nOutput: 5\n\n\u00a0\n",
        [],
        [
            "String"
        ]
    ]
}{
    "Maximum Subarray": [
        "Given an integer array nums, find the contiguous subarray\u00a0(containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        [
            "Best Time to Buy and Sell Stock",
            "Maximum Product Subarray",
            "Degree of an Array",
            "Longest Turbulent Subarray"
        ],
        [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ]
    ],
    "Length of Last Word": [
        "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\nNote: A word is defined as a maximal substring consisting\u00a0of non-space characters only.\nExample:\nInput: \"Hello World\"\nOutput: 5\n\n\u00a0\n",
        [],
        [
            "String"
        ]
    ],
    "Plus One": [
        "Given a non-empty array of digits\u00a0representing a non-negative integer, increment\u00a0one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n\nExample 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\nExample 3:\nInput: digits = [0]\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 100\n0 <= digits[i] <= 9\n\n",
        [
            "Multiply Strings",
            "Add Binary",
            "Plus One Linked List",
            "Add to Array-Form of Integer"
        ],
        [
            "Array"
        ]
    ]
}{
    "Maximum Subarray": [
        "Given an integer array nums, find the contiguous subarray\u00a0(containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        [
            "Best Time to Buy and Sell Stock",
            "Maximum Product Subarray",
            "Degree of an Array",
            "Longest Turbulent Subarray"
        ],
        [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ]
    ],
    "Length of Last Word": [
        "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\nNote: A word is defined as a maximal substring consisting\u00a0of non-space characters only.\nExample:\nInput: \"Hello World\"\nOutput: 5\n\n\u00a0\n",
        [],
        [
            "String"
        ]
    ],
    "Plus One": [
        "Given a non-empty array of digits\u00a0representing a non-negative integer, increment\u00a0one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n\nExample 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\nExample 3:\nInput: digits = [0]\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 100\n0 <= digits[i] <= 9\n\n",
        [
            "Multiply Strings",
            "Add Binary",
            "Plus One Linked List",
            "Add to Array-Form of Integer"
        ],
        [
            "Array"
        ]
    ],
    "Add Binary": [
        "Given two binary strings, return their sum (also a binary string).\nThe input strings are both non-empty and contains only characters 1 or\u00a00.\nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\u00a0\nConstraints:\n\nEach string consists only of '0' or '1' characters.\n1 <= a.length, b.length <= 10^4\nEach string is either \"0\" or doesn't contain any leading zero.\n\n",
        [
            "Add Two Numbers",
            "Multiply Strings",
            "Plus One",
            "Add to Array-Form of Integer"
        ],
        [
            "Math",
            "String"
        ]
    ]
}{
    "Maximum Subarray": [
        "Given an integer array nums, find the contiguous subarray\u00a0(containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation:\u00a0[4,-1,2,1] has the largest sum = 6.\n\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        [
            "Best Time to Buy and Sell Stock",
            "Maximum Product Subarray",
            "Degree of an Array",
            "Longest Turbulent Subarray"
        ],
        [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ]
    ],
    "Length of Last Word": [
        "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word (last word means the last appearing word if we loop from left to right) in the string.\nIf the last word does not exist, return 0.\nNote: A word is defined as a maximal substring consisting\u00a0of non-space characters only.\nExample:\nInput: \"Hello World\"\nOutput: 5\n\n\u00a0\n",
        [],
        [
            "String"
        ]
    ],
    "Plus One": [
        "Given a non-empty array of digits\u00a0representing a non-negative integer, increment\u00a0one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\n\nExample 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\n\nExample 3:\nInput: digits = [0]\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 100\n0 <= digits[i] <= 9\n\n",
        [
            "Multiply Strings",
            "Add Binary",
            "Plus One Linked List",
            "Add to Array-Form of Integer"
        ],
        [
            "Array"
        ]
    ],
    "Add Binary": [
        "Given two binary strings, return their sum (also a binary string).\nThe input strings are both non-empty and contains only characters 1 or\u00a00.\nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\u00a0\nConstraints:\n\nEach string consists only of '0' or '1' characters.\n1 <= a.length, b.length <= 10^4\nEach string is either \"0\" or doesn't contain any leading zero.\n\n",
        [
            "Add Two Numbers",
            "Multiply Strings",
            "Plus One",
            "Add to Array-Form of Integer"
        ],
        [
            "Math",
            "String"
        ]
    ],
    "Sqrt(x)": [
        "Implement int sqrt(int x).\nCompute and return the square root of x, where\u00a0x\u00a0is guaranteed to be a non-negative integer.\nSince the return type\u00a0is an integer, the decimal digits are truncated and only the integer part of the result\u00a0is returned.\nExample 1:\nInput: 4\nOutput: 2\n\nExample 2:\nInput: 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since \n\u00a0            the decimal part is truncated, 2 is returned.\n\n",
        [
            "Pow(x, n)",
            "Valid Perfect Square"
        ],
        [
            "Math",
            "Binary Search"
        ]
    ]
}